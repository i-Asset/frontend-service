/**
 * Distribution Network Service API
 * API documentation for the Distribution Network's API.
 *
 * OpenAPI spec version: 1.0.1
 * Contact: christoph.schranz@salzburgresearcht.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Status } from '../model/status';
import { SubscriptionBody } from '../model/subscriptionBody';
import { SubscriptionShortnameBody } from '../model/subscriptionShortnameBody';
import { Subscriptions } from '../model/subscriptions';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class DatastreamSubscriptionRequestService {

    protected basePath = 'https://iasset.salzburgresearch.at/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete datastream subscription from from a client application
     * 
     * @param body An array of datastream subscriptions to delete.
     * @param authorization Bearer token
     * @param personId User ID from the identity service
     * @param system identifier with &#x27;_&#x27; as level separator
     * @param clientName name of the client application the datastream belongs to
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public distributionnetworkDeleteSubscriptionsPersonIdSystemClientNameDelete(body: Array<SubscriptionShortnameBody>, authorization: string, personId: number, system: string, clientName: string, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public distributionnetworkDeleteSubscriptionsPersonIdSystemClientNameDelete(body: Array<SubscriptionShortnameBody>, authorization: string, personId: number, system: string, clientName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public distributionnetworkDeleteSubscriptionsPersonIdSystemClientNameDelete(body: Array<SubscriptionShortnameBody>, authorization: string, personId: number, system: string, clientName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public distributionnetworkDeleteSubscriptionsPersonIdSystemClientNameDelete(body: Array<SubscriptionShortnameBody>, authorization: string, personId: number, system: string, clientName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling distributionnetworkDeleteSubscriptionsPersonIdSystemClientNameDelete.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling distributionnetworkDeleteSubscriptionsPersonIdSystemClientNameDelete.');
        }

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling distributionnetworkDeleteSubscriptionsPersonIdSystemClientNameDelete.');
        }

        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling distributionnetworkDeleteSubscriptionsPersonIdSystemClientNameDelete.');
        }

        if (clientName === null || clientName === undefined) {
            throw new Error('Required parameter clientName was null or undefined when calling distributionnetworkDeleteSubscriptionsPersonIdSystemClientNameDelete.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            '*/*'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Status>('delete',`${this.basePath}/distributionnetwork/delete_subscriptions/${encodeURIComponent(String(personId))}/${encodeURIComponent(String(system))}/${encodeURIComponent(String(clientName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return all datastream subscriptions that belong to a client application of a system
     * 
     * @param personId User ID from the identity service
     * @param system identifier with &#x27;_&#x27; as level separator
     * @param clientName client app name
     * @param authorization Bearer token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNameGet(personId: number, system: string, clientName: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Subscriptions>;
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNameGet(personId: number, system: string, clientName: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Subscriptions>>;
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNameGet(personId: number, system: string, clientName: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Subscriptions>>;
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNameGet(personId: number, system: string, clientName: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNameGet.');
        }

        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNameGet.');
        }

        if (clientName === null || clientName === undefined) {
            throw new Error('Required parameter clientName was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNameGet.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNameGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Subscriptions>('get',`${this.basePath}/distributionnetwork/subscriptions_per_client/${encodeURIComponent(String(personId))}/${encodeURIComponent(String(system))}/${encodeURIComponent(String(clientName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create new datastream subscription for a client application that belongs to a person.
     * 
     * @param body An array of datastream subscription objects to create.
     * @param authorization Bearer token
     * @param personId User ID from the identity service
     * @param system identifier with &#x27;_&#x27; as level separator
     * @param clientName client app name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePost(body: Array<SubscriptionBody>, authorization: string, personId: number, system: string, clientName: string, observe?: 'body', reportProgress?: boolean): Observable<Subscriptions>;
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePost(body: Array<SubscriptionBody>, authorization: string, personId: number, system: string, clientName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Subscriptions>>;
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePost(body: Array<SubscriptionBody>, authorization: string, personId: number, system: string, clientName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Subscriptions>>;
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePost(body: Array<SubscriptionBody>, authorization: string, personId: number, system: string, clientName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePost.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePost.');
        }

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePost.');
        }

        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePost.');
        }

        if (clientName === null || clientName === undefined) {
            throw new Error('Required parameter clientName was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Subscriptions>('post',`${this.basePath}/distributionnetwork/subscriptions_per_client/${encodeURIComponent(String(personId))}/${encodeURIComponent(String(system))}/${encodeURIComponent(String(clientName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create or update datastream subscriptions for a client application that belongs to a person.
     * 
     * @param body An array of datastream subscription objects to create.
     * @param authorization Bearer token
     * @param personId User ID from the identity service
     * @param system identifier with &#x27;_&#x27; as level separator
     * @param clientName client app name
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePut(body: Array<SubscriptionBody>, authorization: string, personId: number, system: string, clientName: string, observe?: 'body', reportProgress?: boolean): Observable<Subscriptions>;
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePut(body: Array<SubscriptionBody>, authorization: string, personId: number, system: string, clientName: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Subscriptions>>;
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePut(body: Array<SubscriptionBody>, authorization: string, personId: number, system: string, clientName: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Subscriptions>>;
    public distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePut(body: Array<SubscriptionBody>, authorization: string, personId: number, system: string, clientName: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePut.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePut.');
        }

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePut.');
        }

        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePut.');
        }

        if (clientName === null || clientName === undefined) {
            throw new Error('Required parameter clientName was null or undefined when calling distributionnetworkSubscriptionsPerClientPersonIdSystemClientNamePut.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Subscriptions>('put',`${this.basePath}/distributionnetwork/subscriptions_per_client/${encodeURIComponent(String(personId))}/${encodeURIComponent(String(system))}/${encodeURIComponent(String(clientName))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return all datastream subscriptions that belong to a system
     * 
     * @param personId User ID from the identity service
     * @param system identifier with &#x27;_&#x27; as level separator
     * @param authorization Bearer token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public distributionnetworkSubscriptionsPersonIdSystemGet(personId: number, system: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Subscriptions>;
    public distributionnetworkSubscriptionsPersonIdSystemGet(personId: number, system: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Subscriptions>>;
    public distributionnetworkSubscriptionsPersonIdSystemGet(personId: number, system: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Subscriptions>>;
    public distributionnetworkSubscriptionsPersonIdSystemGet(personId: number, system: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling distributionnetworkSubscriptionsPersonIdSystemGet.');
        }

        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling distributionnetworkSubscriptionsPersonIdSystemGet.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling distributionnetworkSubscriptionsPersonIdSystemGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Subscriptions>('get',`${this.basePath}/distributionnetwork/subscriptions/${encodeURIComponent(String(personId))}/${encodeURIComponent(String(system))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
