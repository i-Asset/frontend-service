/**
 * Distribution Network Service API
 * API documentation for the Distribution Network's API.
 *
 * OpenAPI spec version: 1.0.1
 * Contact: christoph.schranz@salzburgresearcht.at
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Status } from '../model/status';
import { StreamAppBody } from '../model/streamAppBody';
import { StreamApps } from '../model/streamApps';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class StreamAppRequestService {

    protected basePath = 'https://iasset.salzburgresearch.at/';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Delete a stream app from a system
     * 
     * @param personId User ID from the identity service
     * @param system identifier with &#x27;_&#x27; as level separator
     * @param streamName stream app name
     * @param authorization Bearer token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public distributionnetworkDeleteStreamAppPersonIdSystemStreamNameDelete(personId: number, system: string, streamName: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<Status>;
    public distributionnetworkDeleteStreamAppPersonIdSystemStreamNameDelete(personId: number, system: string, streamName: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Status>>;
    public distributionnetworkDeleteStreamAppPersonIdSystemStreamNameDelete(personId: number, system: string, streamName: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Status>>;
    public distributionnetworkDeleteStreamAppPersonIdSystemStreamNameDelete(personId: number, system: string, streamName: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling distributionnetworkDeleteStreamAppPersonIdSystemStreamNameDelete.');
        }

        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling distributionnetworkDeleteStreamAppPersonIdSystemStreamNameDelete.');
        }

        if (streamName === null || streamName === undefined) {
            throw new Error('Required parameter streamName was null or undefined when calling distributionnetworkDeleteStreamAppPersonIdSystemStreamNameDelete.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling distributionnetworkDeleteStreamAppPersonIdSystemStreamNameDelete.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Status>('delete',`${this.basePath}/distributionnetwork/delete_stream_app/${encodeURIComponent(String(personId))}/${encodeURIComponent(String(system))}/${encodeURIComponent(String(streamName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return all stream apps that belong to a system
     * 
     * @param personId User ID from the identity service
     * @param system identifier with &#x27;_&#x27; as level separator
     * @param authorization Bearer token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public distributionnetworkStreamAppsPersonIdSystemGet(personId: number, system: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<StreamApps>;
    public distributionnetworkStreamAppsPersonIdSystemGet(personId: number, system: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StreamApps>>;
    public distributionnetworkStreamAppsPersonIdSystemGet(personId: number, system: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StreamApps>>;
    public distributionnetworkStreamAppsPersonIdSystemGet(personId: number, system: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemGet.');
        }

        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemGet.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StreamApps>('get',`${this.basePath}/distributionnetwork/stream_apps/${encodeURIComponent(String(personId))}/${encodeURIComponent(String(system))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create a new stream app for a system that belongs to a person.
     * 
     * @param body A stream app object to create.
     * @param authorization Bearer token
     * @param personId User ID from the identity service
     * @param system identifier with &#x27;_&#x27; as level separator
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public distributionnetworkStreamAppsPersonIdSystemPost(body: StreamAppBody, authorization: string, personId: number, system: string, observe?: 'body', reportProgress?: boolean): Observable<StreamApps>;
    public distributionnetworkStreamAppsPersonIdSystemPost(body: StreamAppBody, authorization: string, personId: number, system: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StreamApps>>;
    public distributionnetworkStreamAppsPersonIdSystemPost(body: StreamAppBody, authorization: string, personId: number, system: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StreamApps>>;
    public distributionnetworkStreamAppsPersonIdSystemPost(body: StreamAppBody, authorization: string, personId: number, system: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemPost.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemPost.');
        }

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemPost.');
        }

        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemPost.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<StreamApps>('post',`${this.basePath}/distributionnetwork/stream_apps/${encodeURIComponent(String(personId))}/${encodeURIComponent(String(system))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Create or update a stream app for a system that belongs to a person.
     * 
     * @param body A stream app object to create.
     * @param authorization Bearer token
     * @param personId User ID from the identity service
     * @param system identifier with &#x27;_&#x27; as level separator
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public distributionnetworkStreamAppsPersonIdSystemPut(body: StreamAppBody, authorization: string, personId: number, system: string, observe?: 'body', reportProgress?: boolean): Observable<StreamApps>;
    public distributionnetworkStreamAppsPersonIdSystemPut(body: StreamAppBody, authorization: string, personId: number, system: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StreamApps>>;
    public distributionnetworkStreamAppsPersonIdSystemPut(body: StreamAppBody, authorization: string, personId: number, system: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StreamApps>>;
    public distributionnetworkStreamAppsPersonIdSystemPut(body: StreamAppBody, authorization: string, personId: number, system: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemPut.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemPut.');
        }

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemPut.');
        }

        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemPut.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<StreamApps>('put',`${this.basePath}/distributionnetwork/stream_apps/${encodeURIComponent(String(personId))}/${encodeURIComponent(String(system))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Return a specific stream app that belongs to a system
     * 
     * @param personId User ID from the identity service
     * @param system identifier with &#x27;_&#x27; as level separator
     * @param streamName stream app name
     * @param authorization Bearer token
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public distributionnetworkStreamAppsPersonIdSystemStreamNameGet(personId: number, system: string, streamName: string, authorization: string, observe?: 'body', reportProgress?: boolean): Observable<StreamApps>;
    public distributionnetworkStreamAppsPersonIdSystemStreamNameGet(personId: number, system: string, streamName: string, authorization: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<StreamApps>>;
    public distributionnetworkStreamAppsPersonIdSystemStreamNameGet(personId: number, system: string, streamName: string, authorization: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<StreamApps>>;
    public distributionnetworkStreamAppsPersonIdSystemStreamNameGet(personId: number, system: string, streamName: string, authorization: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (personId === null || personId === undefined) {
            throw new Error('Required parameter personId was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemStreamNameGet.');
        }

        if (system === null || system === undefined) {
            throw new Error('Required parameter system was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemStreamNameGet.');
        }

        if (streamName === null || streamName === undefined) {
            throw new Error('Required parameter streamName was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemStreamNameGet.');
        }

        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling distributionnetworkStreamAppsPersonIdSystemStreamNameGet.');
        }

        let headers = this.defaultHeaders;
        if (authorization !== undefined && authorization !== null) {
            headers = headers.set('Authorization', String(authorization));
        }

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<StreamApps>('get',`${this.basePath}/distributionnetwork/stream_apps/${encodeURIComponent(String(personId))}/${encodeURIComponent(String(system))}/${encodeURIComponent(String(streamName))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
