/**
 * the Info
 * infodescription
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { Resource } from '../model/resource';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AssetAdministrationShellEnvironmentSerializationAPIService {

    protected basePath = '{protocol}://{server}:{port}/{path}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Returns an appropriate serialization based on the specified format (see SerializationFormat)
     * 
     * @param aasIds The Asset Administration Shells&#x27; unique ids (UTF8-BASE64-URL-encoded)
     * @param submodelIds The Submodels&#x27; unique ids (UTF8-BASE64-URL-encoded)
     * @param includeConceptDescriptions Include Concept Descriptions?
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public generateSerializationByIds(aasIds: Array<string>, submodelIds: Array<string>, includeConceptDescriptions: string, observe?: 'body', reportProgress?: boolean): Observable<Resource>;
    public generateSerializationByIds(aasIds: Array<string>, submodelIds: Array<string>, includeConceptDescriptions: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Resource>>;
    public generateSerializationByIds(aasIds: Array<string>, submodelIds: Array<string>, includeConceptDescriptions: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Resource>>;
    public generateSerializationByIds(aasIds: Array<string>, submodelIds: Array<string>, includeConceptDescriptions: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (aasIds === null || aasIds === undefined) {
            throw new Error('Required parameter aasIds was null or undefined when calling generateSerializationByIds.');
        }

        if (submodelIds === null || submodelIds === undefined) {
            throw new Error('Required parameter submodelIds was null or undefined when calling generateSerializationByIds.');
        }

        if (includeConceptDescriptions === null || includeConceptDescriptions === undefined) {
            throw new Error('Required parameter includeConceptDescriptions was null or undefined when calling generateSerializationByIds.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (aasIds) {
            aasIds.forEach((element) => {
                queryParameters = queryParameters.append('aasIds', <any>element);
            })
        }
        if (submodelIds) {
            submodelIds.forEach((element) => {
                queryParameters = queryParameters.append('submodelIds', <any>element);
            })
        }
        if (includeConceptDescriptions !== undefined && includeConceptDescriptions !== null) {
            queryParameters = queryParameters.set('includeConceptDescriptions', <any>includeConceptDescriptions);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/asset-administration-shell-package+xml'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Resource>('get',`${this.basePath}/serialization`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
