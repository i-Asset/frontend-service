/**
 * the Info
 * infodescription
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { AssetAdministrationShell } from '../model/assetAdministrationShell';
import { ConceptDescription } from '../model/conceptDescription';
import { Referable } from '../model/referable';
import { Reference } from '../model/reference';
import { Submodel } from '../model/submodel';
import { SubmodelElement } from '../model/submodelElement';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class AssetAdministrationShellRepositoryInterfaceForConnectorService {

    protected basePath = '{protocol}://{server}:{port}/{path}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Get the AssetAdministrationShell
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssetAdministrationShell1(aasIdentifier: string, observe?: 'body', reportProgress?: boolean): Observable<AssetAdministrationShell>;
    public getAssetAdministrationShell1(aasIdentifier: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssetAdministrationShell>>;
    public getAssetAdministrationShell1(aasIdentifier: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssetAdministrationShell>>;
    public getAssetAdministrationShell1(aasIdentifier: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling getAssetAdministrationShell1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<AssetAdministrationShell>('get',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the AssetAdministrationShell
     * 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getAssetAdministrationShells(observe?: 'body', reportProgress?: boolean): Observable<Array<AssetAdministrationShell>>;
    public getAssetAdministrationShells(observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<AssetAdministrationShell>>>;
    public getAssetAdministrationShells(observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<AssetAdministrationShell>>>;
    public getAssetAdministrationShells(observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<AssetAdministrationShell>>('get',`${this.basePath}/repository/shells`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a ConceptDescription
     * 
     * @param cdIdentifier The ConceptDescriptions’s unique id (UTF8-BASE64-URL-encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConceptDescription(cdIdentifier: string, observe?: 'body', reportProgress?: boolean): Observable<ConceptDescription>;
    public getConceptDescription(cdIdentifier: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptDescription>>;
    public getConceptDescription(cdIdentifier: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptDescription>>;
    public getConceptDescription(cdIdentifier: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (cdIdentifier === null || cdIdentifier === undefined) {
            throw new Error('Required parameter cdIdentifier was null or undefined when calling getConceptDescription.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ConceptDescription>('get',`${this.basePath}/repository/concept-description/${encodeURIComponent(String(cdIdentifier))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get the Submodel
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param submodelIdentifier The Asset Submodels’s unique id (UTF8-BASE64-URL-encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubmodel2(aasIdentifier: string, submodelIdentifier: string, observe?: 'body', reportProgress?: boolean): Observable<Submodel>;
    public getSubmodel2(aasIdentifier: string, submodelIdentifier: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submodel>>;
    public getSubmodel2(aasIdentifier: string, submodelIdentifier: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submodel>>;
    public getSubmodel2(aasIdentifier: string, submodelIdentifier: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling getSubmodel2.');
        }

        if (submodelIdentifier === null || submodelIdentifier === undefined) {
            throw new Error('Required parameter submodelIdentifier was null or undefined when calling getSubmodel2.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Submodel>('get',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels/${encodeURIComponent(String(submodelIdentifier))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtain a referable element by it&#x27;s reference
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param submodelIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param path The path to the requested element
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubmodelElement1(aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'body', reportProgress?: boolean): Observable<Referable>;
    public getSubmodelElement1(aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Referable>>;
    public getSubmodelElement1(aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Referable>>;
    public getSubmodelElement1(aasIdentifier: string, submodelIdentifier: string, path: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling getSubmodelElement1.');
        }

        if (submodelIdentifier === null || submodelIdentifier === undefined) {
            throw new Error('Required parameter submodelIdentifier was null or undefined when calling getSubmodelElement1.');
        }

        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling getSubmodelElement1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Referable>('get',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels/${encodeURIComponent(String(submodelIdentifier))}/submodel/submodel-elements/${encodeURIComponent(String(path))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtain the submodel references from the AAS
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getSubmodels1(aasIdentifier: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Reference>>;
    public getSubmodels1(aasIdentifier: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Reference>>>;
    public getSubmodels1(aasIdentifier: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Reference>>>;
    public getSubmodels1(aasIdentifier: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling getSubmodels1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Reference>>('get',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtain the value of the (Data)Element
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param submodelIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param path The path to the container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getValue1(aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public getValue1(aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public getValue1(aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public getValue1(aasIdentifier: string, submodelIdentifier: string, path: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling getValue1.');
        }

        if (submodelIdentifier === null || submodelIdentifier === undefined) {
            throw new Error('Required parameter submodelIdentifier was null or undefined when calling getValue1.');
        }

        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling getValue1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json',
            'text/plain'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<any>('get',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels/${encodeURIComponent(String(submodelIdentifier))}/submodel/submodel-elements/${encodeURIComponent(String(path))}/value`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtain the identifiable element
     * 
     * @param body 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param submodelIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param path The path to the container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public invokeOperation1(body: any, aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public invokeOperation1(body: any, aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public invokeOperation1(body: any, aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public invokeOperation1(body: any, aasIdentifier: string, submodelIdentifier: string, path: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling invokeOperation1.');
        }

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling invokeOperation1.');
        }

        if (submodelIdentifier === null || submodelIdentifier === undefined) {
            throw new Error('Required parameter submodelIdentifier was null or undefined when calling invokeOperation1.');
        }

        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling invokeOperation1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels/${encodeURIComponent(String(submodelIdentifier))}/submodel/submodel-elements/${encodeURIComponent(String(path))}/invoke`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtain the identifiable element
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param submodelIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param path The path to the container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeSubmodelElement(aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public removeSubmodelElement(aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public removeSubmodelElement(aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public removeSubmodelElement(aasIdentifier: string, submodelIdentifier: string, path: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling removeSubmodelElement.');
        }

        if (submodelIdentifier === null || submodelIdentifier === undefined) {
            throw new Error('Required parameter submodelIdentifier was null or undefined when calling removeSubmodelElement.');
        }

        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling removeSubmodelElement.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('delete',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels/${encodeURIComponent(String(submodelIdentifier))}/submodel/submodel-elements/${encodeURIComponent(String(path))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the submodel references of the identified AAS
     * 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public removeSubmodelReference(aasIdentifier: string, submodelIdentifier: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Reference>>;
    public removeSubmodelReference(aasIdentifier: string, submodelIdentifier: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Reference>>>;
    public removeSubmodelReference(aasIdentifier: string, submodelIdentifier: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Reference>>>;
    public removeSubmodelReference(aasIdentifier: string, submodelIdentifier: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling removeSubmodelReference.');
        }

        if (submodelIdentifier === null || submodelIdentifier === undefined) {
            throw new Error('Required parameter submodelIdentifier was null or undefined when calling removeSubmodelReference.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<Reference>>('delete',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels/${encodeURIComponent(String(submodelIdentifier))}`,
            {
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a AssetAdministrationShell to the Repository
     * 
     * @param body 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setAssetAdministrationShell(body: AssetAdministrationShell, aasIdentifier: string, observe?: 'body', reportProgress?: boolean): Observable<AssetAdministrationShell>;
    public setAssetAdministrationShell(body: AssetAdministrationShell, aasIdentifier: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<AssetAdministrationShell>>;
    public setAssetAdministrationShell(body: AssetAdministrationShell, aasIdentifier: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<AssetAdministrationShell>>;
    public setAssetAdministrationShell(body: AssetAdministrationShell, aasIdentifier: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setAssetAdministrationShell.');
        }

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling setAssetAdministrationShell.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<AssetAdministrationShell>('put',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Get a ConceptDescription
     * 
     * @param body 
     * @param cdIdentifier The ConceptDescriptions’s unique id (UTF8-BASE64-URL-encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setConceptDescription(body: ConceptDescription, cdIdentifier: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setConceptDescription(body: ConceptDescription, cdIdentifier: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setConceptDescription(body: ConceptDescription, cdIdentifier: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setConceptDescription(body: ConceptDescription, cdIdentifier: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setConceptDescription.');
        }

        if (cdIdentifier === null || cdIdentifier === undefined) {
            throw new Error('Required parameter cdIdentifier was null or undefined when calling setConceptDescription.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/repository/concept-description/${encodeURIComponent(String(cdIdentifier))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add or update a Submodel to the Repository
     * 
     * @param body 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param submodelIdentifier The Submodel’s unique id (UTF8-BASE64-URL-encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setSubmodel(body: Submodel, aasIdentifier: string, submodelIdentifier: string, observe?: 'body', reportProgress?: boolean): Observable<Submodel>;
    public setSubmodel(body: Submodel, aasIdentifier: string, submodelIdentifier: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Submodel>>;
    public setSubmodel(body: Submodel, aasIdentifier: string, submodelIdentifier: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Submodel>>;
    public setSubmodel(body: Submodel, aasIdentifier: string, submodelIdentifier: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setSubmodel.');
        }

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling setSubmodel.');
        }

        if (submodelIdentifier === null || submodelIdentifier === undefined) {
            throw new Error('Required parameter submodelIdentifier was null or undefined when calling setSubmodel.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Submodel>('put',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels/${encodeURIComponent(String(submodelIdentifier))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a submodel&#x27;s submodel element
     * 
     * @param body 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param submodelIdentifier The Asset Submodels’s unique id (UTF8-BASE64-URL-encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setSubmodelElement(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setSubmodelElement(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setSubmodelElement(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setSubmodelElement(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setSubmodelElement.');
        }

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling setSubmodelElement.');
        }

        if (submodelIdentifier === null || submodelIdentifier === undefined) {
            throw new Error('Required parameter submodelIdentifier was null or undefined when calling setSubmodelElement.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels/${encodeURIComponent(String(submodelIdentifier))}/submodel/submodel-elements`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update a submodel element at the provided path
     * 
     * @param body 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param submodelIdentifier The Asset Submodels’s unique id (UTF8-BASE64-URL-encoded)
     * @param path The path to the container where the new element is to be placed
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setSubmodelElement1(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setSubmodelElement1(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setSubmodelElement1(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setSubmodelElement1(body: SubmodelElement, aasIdentifier: string, submodelIdentifier: string, path: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setSubmodelElement1.');
        }

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling setSubmodelElement1.');
        }

        if (submodelIdentifier === null || submodelIdentifier === undefined) {
            throw new Error('Required parameter submodelIdentifier was null or undefined when calling setSubmodelElement1.');
        }

        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling setSubmodelElement1.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels/${encodeURIComponent(String(submodelIdentifier))}/submodel/submodel-elements/${encodeURIComponent(String(path))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update the submodel references of the identified AAS
     * 
     * @param body 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setSubmodels(body: Array<Reference>, aasIdentifier: string, observe?: 'body', reportProgress?: boolean): Observable<Array<Reference>>;
    public setSubmodels(body: Array<Reference>, aasIdentifier: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<Reference>>>;
    public setSubmodels(body: Array<Reference>, aasIdentifier: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<Reference>>>;
    public setSubmodels(body: Array<Reference>, aasIdentifier: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setSubmodels.');
        }

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling setSubmodels.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<Reference>>('post',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtain the identifiable element
     * 
     * @param body 
     * @param aasIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param submodelIdentifier The Asset Administration Shell’s unique id (UTF8-BASE64-URL-encoded)
     * @param path The path to the container
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setValue(body: any, aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public setValue(body: any, aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public setValue(body: any, aasIdentifier: string, submodelIdentifier: string, path: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public setValue(body: any, aasIdentifier: string, submodelIdentifier: string, path: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setValue.');
        }

        if (aasIdentifier === null || aasIdentifier === undefined) {
            throw new Error('Required parameter aasIdentifier was null or undefined when calling setValue.');
        }

        if (submodelIdentifier === null || submodelIdentifier === undefined) {
            throw new Error('Required parameter submodelIdentifier was null or undefined when calling setValue.');
        }

        if (path === null || path === undefined) {
            throw new Error('Required parameter path was null or undefined when calling setValue.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('post',`${this.basePath}/repository/shells/${encodeURIComponent(String(aasIdentifier))}/aas/submodels/${encodeURIComponent(String(submodelIdentifier))}/submodel/submodel-elements/${encodeURIComponent(String(path))}/value`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
