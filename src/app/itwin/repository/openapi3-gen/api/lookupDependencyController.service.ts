/**
 * the Info
 * infodescription
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ConceptBody } from '../model/conceptBody';
import { ConceptBody1 } from '../model/conceptBody1';
import { ConceptClass } from '../model/conceptClass';
import { ConceptProperty } from '../model/conceptProperty';
import { ConceptPropertyUnit } from '../model/conceptPropertyUnit';
import { ConceptPropertyValue } from '../model/conceptPropertyValue';
import { InlineResponse200 } from '../model/inlineResponse200';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable()
export class LookupDependencyControllerService {

    protected basePath = '{protocol}://{server}:{port}/{path}';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Add a new concept element to the Semantic Lookup Repository
     * The object must be of type: ConceptClass, Property, PropertyValue or PropertyUnit
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addConcept(body: ConceptBody, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public addConcept(body: ConceptBody, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public addConcept(body: ConceptBody, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public addConcept(body: ConceptBody, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addConcept.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<InlineResponse200>('put',`${this.basePath}/concept`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new ConceptClass element to the repository
     * A new class is added, the parentElement may only provided as parameter!
     * @param body 
     * @param parentIdentifier The ConceptClass Identifier (IRDI or URI) of the parent class - optional
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addConceptClass(body: ConceptClass, parentIdentifier?: string, observe?: 'body', reportProgress?: boolean): Observable<ConceptClass>;
    public addConceptClass(body: ConceptClass, parentIdentifier?: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptClass>>;
    public addConceptClass(body: ConceptClass, parentIdentifier?: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptClass>>;
    public addConceptClass(body: ConceptClass, parentIdentifier?: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addConceptClass.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (parentIdentifier !== undefined && parentIdentifier !== null) {
            queryParameters = queryParameters.set('parentIdentifier', <any>parentIdentifier);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ConceptClass>('put',`${this.basePath}/concept/class`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new property to the repository
     * Read the Property with it&#x27;s full IRDI
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addProperty(body: ConceptProperty, observe?: 'body', reportProgress?: boolean): Observable<ConceptProperty>;
    public addProperty(body: ConceptProperty, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptProperty>>;
    public addProperty(body: ConceptProperty, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptProperty>>;
    public addProperty(body: ConceptProperty, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addProperty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ConceptProperty>('put',`${this.basePath}/concept/property`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new property to the repository
     * Read the PropertyUnit with it&#x27;s full IRDI
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addPropertyUnit(body: ConceptPropertyUnit, observe?: 'body', reportProgress?: boolean): Observable<ConceptPropertyUnit>;
    public addPropertyUnit(body: ConceptPropertyUnit, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptPropertyUnit>>;
    public addPropertyUnit(body: ConceptPropertyUnit, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptPropertyUnit>>;
    public addPropertyUnit(body: ConceptPropertyUnit, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addPropertyUnit.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ConceptPropertyUnit>('put',`${this.basePath}/concept/unit`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add a new property value to the repository
     * Read the value with it&#x27;s full IRDI
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public addPropertyValue(body: ConceptPropertyValue, observe?: 'body', reportProgress?: boolean): Observable<ConceptPropertyValue>;
    public addPropertyValue(body: ConceptPropertyValue, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptPropertyValue>>;
    public addPropertyValue(body: ConceptPropertyValue, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptPropertyValue>>;
    public addPropertyValue(body: ConceptPropertyValue, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling addPropertyValue.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ConceptPropertyValue>('put',`${this.basePath}/concept/value`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a concept from the Semantic Lookup Repository
     * NOTE: Dependent data is also deleted
     * @param id Concept Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteConcept(id: string, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deleteConcept(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deleteConcept(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deleteConcept(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteConcept.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('delete',`${this.basePath}/concept`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a ConceptClass from the Semantic Lookup Repository
     * NOTE: Dependent data is also deleted
     * @param id ConceptClass Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteConceptClass(id: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deleteConceptClass(id: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deleteConceptClass(id: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deleteConceptClass(id: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteConceptClass.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id) {
            id.forEach((element) => {
                queryParameters = queryParameters.append('id', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('delete',`${this.basePath}/concept/class`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete one or more from the Semantic Lookup Repository
     * NOTE: Dependent data (e.g. Assignment to PropertyValues) is also deleted
     * @param id Property Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deleteProperty(id: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deleteProperty(id: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deleteProperty(id: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deleteProperty(id: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deleteProperty.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id) {
            id.forEach((element) => {
                queryParameters = queryParameters.append('id', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('delete',`${this.basePath}/concept/property`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a property unit from the Semantic Lookup Repository
     * NOTE: Dependent data is also deleted
     * @param id PropertyUnit Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePropertyUnit(id: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deletePropertyUnit(id: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deletePropertyUnit(id: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deletePropertyUnit(id: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePropertyUnit.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id) {
            id.forEach((element) => {
                queryParameters = queryParameters.append('id', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('delete',`${this.basePath}/concept/unit`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Delete a PropertyValue from the Semantic Lookup Repository
     * NOTE: Dependent data is also deleted
     * @param id PropertyValue Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public deletePropertyValue(id: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<boolean>;
    public deletePropertyValue(id: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<boolean>>;
    public deletePropertyValue(id: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<boolean>>;
    public deletePropertyValue(id: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling deletePropertyValue.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id) {
            id.forEach((element) => {
                queryParameters = queryParameters.append('id', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<boolean>('delete',`${this.basePath}/concept/value`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read a concept element by its identifier
     * The result is of type: ConceptClass, Property, PropertyValue or PropertyUnit
     * @param id Concept Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConcept(id: string, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public getConcept(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public getConcept(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public getConcept(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getConcept.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<InlineResponse200>('get',`${this.basePath}/concept`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read a ConceptClass element based on it&#x27;s ID
     * Read the ConceptClass with it&#x27;s full URI or IRDI
     * @param id ConceptClass Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getConceptClass(id: string, observe?: 'body', reportProgress?: boolean): Observable<ConceptClass>;
    public getConceptClass(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptClass>>;
    public getConceptClass(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptClass>>;
    public getConceptClass(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getConceptClass.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ConceptClass>('get',`${this.basePath}/concept/class`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read all Property data relevant for the given class
     * Obtain all relevant properties for given concept class
     * @param id ConceptClass Identifier (IRDI or URI)
     * @param complete 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPropertiesForConceptClass(id: string, complete?: boolean, observe?: 'body', reportProgress?: boolean): Observable<Array<ConceptProperty>>;
    public getPropertiesForConceptClass(id: string, complete?: boolean, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConceptProperty>>>;
    public getPropertiesForConceptClass(id: string, complete?: boolean, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConceptProperty>>>;
    public getPropertiesForConceptClass(id: string, complete?: boolean, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPropertiesForConceptClass.');
        }


        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (complete !== undefined && complete !== null) {
            queryParameters = queryParameters.set('complete', <any>complete);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ConceptProperty>>('get',`${this.basePath}/concept/class/properties`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtain a Property based on it&#x27;s ID
     * Read the ClassificationClass with it&#x27;s full IRDI
     * @param id Property Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getProperty(id: string, observe?: 'body', reportProgress?: boolean): Observable<ConceptProperty>;
    public getProperty(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptProperty>>;
    public getProperty(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptProperty>>;
    public getProperty(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getProperty.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ConceptProperty>('get',`${this.basePath}/concept/property`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtain a PropertyUnit based on it&#x27;s ID
     * Read the PropertyUnit with it&#x27;s full IRDI
     * @param id PropertyUnit Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPropertyUnit(id: string, observe?: 'body', reportProgress?: boolean): Observable<ConceptPropertyUnit>;
    public getPropertyUnit(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptPropertyUnit>>;
    public getPropertyUnit(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptPropertyUnit>>;
    public getPropertyUnit(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPropertyUnit.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ConceptPropertyUnit>('get',`${this.basePath}/concept/unit`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtain a PropertyValue based on it&#x27;s ID
     * Read the PropertyValue with it&#x27;s full IRDI
     * @param id PropertyValue Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPropertyValue(id: string, observe?: 'body', reportProgress?: boolean): Observable<ConceptPropertyValue>;
    public getPropertyValue(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptPropertyValue>>;
    public getPropertyValue(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptPropertyValue>>;
    public getPropertyValue(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPropertyValue.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<ConceptPropertyValue>('get',`${this.basePath}/concept/value`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Read all values relevant for the given property, optionally aligned to a given ConceptClass
     * When the ConceptClass Identifier is provided, the value list is checked for the particular ConceptClass
     * @param id Property Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPropertyValues(id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ConceptPropertyValue>>;
    public getPropertyValues(id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConceptPropertyValue>>>;
    public getPropertyValues(id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConceptPropertyValue>>>;
    public getPropertyValues(id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling getPropertyValues.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ConceptPropertyValue>>('get',`${this.basePath}/concept/property/values`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Obtain the values allowed for the provided property, (optionally) when used with the given class
     * Specify all relevant properties for given concept class
     * @param classid ConceptClass Identifier (IRDI or URI)
     * @param propertyId ConceptProperty Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public getPropertyValues1(classid: string, propertyId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ConceptPropertyValue>>;
    public getPropertyValues1(classid: string, propertyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConceptPropertyValue>>>;
    public getPropertyValues1(classid: string, propertyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConceptPropertyValue>>>;
    public getPropertyValues1(classid: string, propertyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (classid === null || classid === undefined) {
            throw new Error('Required parameter classid was null or undefined when calling getPropertyValues1.');
        }

        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling getPropertyValues1.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (classid !== undefined && classid !== null) {
            queryParameters = queryParameters.set('classid', <any>classid);
        }
        if (propertyId !== undefined && propertyId !== null) {
            queryParameters = queryParameters.set('propertyId', <any>propertyId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ConceptPropertyValue>>('get',`${this.basePath}/concept/class/property/values`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Change an existing concept element in the Semantic Lookup Repository
     * The object must be of type: ConceptClass, Property, PropertyValue or PropertyUnit
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setConcept(body: ConceptBody1, observe?: 'body', reportProgress?: boolean): Observable<InlineResponse200>;
    public setConcept(body: ConceptBody1, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<InlineResponse200>>;
    public setConcept(body: ConceptBody1, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<InlineResponse200>>;
    public setConcept(body: ConceptBody1, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setConcept.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<InlineResponse200>('post',`${this.basePath}/concept`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing ConceptClass in the repository
     * Note: the ConceptClass might contain additional data (parent class) this is not changed
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setConceptClass(body: ConceptClass, observe?: 'body', reportProgress?: boolean): Observable<ConceptClass>;
    public setConceptClass(body: ConceptClass, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptClass>>;
    public setConceptClass(body: ConceptClass, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptClass>>;
    public setConceptClass(body: ConceptClass, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setConceptClass.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ConceptClass>('post',`${this.basePath}/concept/class`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add all Property data relevant for the given class
     * Specify all relevant properties for given concept class
     * @param id ConceptClass Identifier (IRDI or URI)
     * @param property List of Property Identifier (IRDI or URI
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPropertiesByIdForConceptClass(id: string, property: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<ConceptProperty>>;
    public setPropertiesByIdForConceptClass(id: string, property: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConceptProperty>>>;
    public setPropertiesByIdForConceptClass(id: string, property: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConceptProperty>>>;
    public setPropertiesByIdForConceptClass(id: string, property: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setPropertiesByIdForConceptClass.');
        }

        if (property === null || property === undefined) {
            throw new Error('Required parameter property was null or undefined when calling setPropertiesByIdForConceptClass.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }
        if (property) {
            property.forEach((element) => {
                queryParameters = queryParameters.append('property', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ConceptProperty>>('put',`${this.basePath}/concept/class/properties`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Add all Property data relevant for the given class
     * Specify all relevant properties for given concept class
     * @param body 
     * @param id ConceptClass Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPropertiesForConceptClass(body: Array<ConceptProperty>, id: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ConceptProperty>>;
    public setPropertiesForConceptClass(body: Array<ConceptProperty>, id: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConceptProperty>>>;
    public setPropertiesForConceptClass(body: Array<ConceptProperty>, id: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConceptProperty>>>;
    public setPropertiesForConceptClass(body: Array<ConceptProperty>, id: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setPropertiesForConceptClass.');
        }

        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling setPropertiesForConceptClass.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (id !== undefined && id !== null) {
            queryParameters = queryParameters.set('id', <any>id);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<ConceptProperty>>('post',`${this.basePath}/concept/class/properties`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing Property in the repository
     * Note: dependend data (PropertyUnit, PropertyValue) might be provided
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setProperty(body: ConceptProperty, observe?: 'body', reportProgress?: boolean): Observable<ConceptProperty>;
    public setProperty(body: ConceptProperty, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptProperty>>;
    public setProperty(body: ConceptProperty, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptProperty>>;
    public setProperty(body: ConceptProperty, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setProperty.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ConceptProperty>('post',`${this.basePath}/concept/property`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing property unit in the repository
     * Read the PropertyUnit with it&#x27;s full URI or IRDI
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPropertyUnit(body: ConceptPropertyUnit, observe?: 'body', reportProgress?: boolean): Observable<ConceptPropertyUnit>;
    public setPropertyUnit(body: ConceptPropertyUnit, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptPropertyUnit>>;
    public setPropertyUnit(body: ConceptPropertyUnit, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptPropertyUnit>>;
    public setPropertyUnit(body: ConceptPropertyUnit, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setPropertyUnit.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ConceptPropertyUnit>('post',`${this.basePath}/concept/unit`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Update an existing property value in the repository
     * Read the Property Value with it&#x27;s full IRDI
     * @param body 
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPropertyValue(body: ConceptPropertyValue, observe?: 'body', reportProgress?: boolean): Observable<ConceptPropertyValue>;
    public setPropertyValue(body: ConceptPropertyValue, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<ConceptPropertyValue>>;
    public setPropertyValue(body: ConceptPropertyValue, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<ConceptPropertyValue>>;
    public setPropertyValue(body: ConceptPropertyValue, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setPropertyValue.');
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<ConceptPropertyValue>('post',`${this.basePath}/concept/value`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Specify the values allowed for the provided property, when used with the given class
     * Specify all relevant properties for given concept class
     * @param classid ConceptClass Identifier (IRDI or URI)
     * @param propertyId ConceptClass Identifier (IRDI or URI)
     * @param conceptPropertyValue List of Property Identifier (IRDI or URI
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPropertyValues(classid: string, propertyId: string, conceptPropertyValue: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<ConceptPropertyValue>>;
    public setPropertyValues(classid: string, propertyId: string, conceptPropertyValue: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConceptPropertyValue>>>;
    public setPropertyValues(classid: string, propertyId: string, conceptPropertyValue: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConceptPropertyValue>>>;
    public setPropertyValues(classid: string, propertyId: string, conceptPropertyValue: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (classid === null || classid === undefined) {
            throw new Error('Required parameter classid was null or undefined when calling setPropertyValues.');
        }

        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling setPropertyValues.');
        }

        if (conceptPropertyValue === null || conceptPropertyValue === undefined) {
            throw new Error('Required parameter conceptPropertyValue was null or undefined when calling setPropertyValues.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (classid !== undefined && classid !== null) {
            queryParameters = queryParameters.set('classid', <any>classid);
        }
        if (propertyId !== undefined && propertyId !== null) {
            queryParameters = queryParameters.set('propertyId', <any>propertyId);
        }
        if (conceptPropertyValue) {
            conceptPropertyValue.forEach((element) => {
                queryParameters = queryParameters.append('conceptPropertyValue', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ConceptPropertyValue>>('delete',`${this.basePath}/concept/class/property/values`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Specify the values allowed for the provided property, when used with the given class
     * Specify all relevant properties for given concept class
     * @param classid ConceptClass Identifier (IRDI or URI)
     * @param propertyId ConceptClass Identifier (IRDI or URI)
     * @param conceptPropertyValue List of Property Identifier (IRDI or URI
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPropertyValuesByIdForConceptClass(classid: string, propertyId: string, conceptPropertyValue: Array<string>, observe?: 'body', reportProgress?: boolean): Observable<Array<ConceptPropertyValue>>;
    public setPropertyValuesByIdForConceptClass(classid: string, propertyId: string, conceptPropertyValue: Array<string>, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConceptPropertyValue>>>;
    public setPropertyValuesByIdForConceptClass(classid: string, propertyId: string, conceptPropertyValue: Array<string>, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConceptPropertyValue>>>;
    public setPropertyValuesByIdForConceptClass(classid: string, propertyId: string, conceptPropertyValue: Array<string>, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (classid === null || classid === undefined) {
            throw new Error('Required parameter classid was null or undefined when calling setPropertyValuesByIdForConceptClass.');
        }

        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling setPropertyValuesByIdForConceptClass.');
        }

        if (conceptPropertyValue === null || conceptPropertyValue === undefined) {
            throw new Error('Required parameter conceptPropertyValue was null or undefined when calling setPropertyValuesByIdForConceptClass.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (classid !== undefined && classid !== null) {
            queryParameters = queryParameters.set('classid', <any>classid);
        }
        if (propertyId !== undefined && propertyId !== null) {
            queryParameters = queryParameters.set('propertyId', <any>propertyId);
        }
        if (conceptPropertyValue) {
            conceptPropertyValue.forEach((element) => {
                queryParameters = queryParameters.append('conceptPropertyValue', <any>element);
            })
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ConceptPropertyValue>>('put',`${this.basePath}/concept/class/property/values`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Specify the values allowed for the provided property, when used with the given class
     * Specify all relevant properties for given concept class
     * @param body 
     * @param classid ConceptClass Identifier (IRDI or URI)
     * @param propertyId ConceptClass Identifier (IRDI or URI)
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public setPropertyValuesForConceptClass(body: Array<ConceptPropertyValue>, classid: string, propertyId: string, observe?: 'body', reportProgress?: boolean): Observable<Array<ConceptPropertyValue>>;
    public setPropertyValuesForConceptClass(body: Array<ConceptPropertyValue>, classid: string, propertyId: string, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ConceptPropertyValue>>>;
    public setPropertyValuesForConceptClass(body: Array<ConceptPropertyValue>, classid: string, propertyId: string, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ConceptPropertyValue>>>;
    public setPropertyValuesForConceptClass(body: Array<ConceptPropertyValue>, classid: string, propertyId: string, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling setPropertyValuesForConceptClass.');
        }

        if (classid === null || classid === undefined) {
            throw new Error('Required parameter classid was null or undefined when calling setPropertyValuesForConceptClass.');
        }

        if (propertyId === null || propertyId === undefined) {
            throw new Error('Required parameter propertyId was null or undefined when calling setPropertyValuesForConceptClass.');
        }

        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (classid !== undefined && classid !== null) {
            queryParameters = queryParameters.set('classid', <any>classid);
        }
        if (propertyId !== undefined && propertyId !== null) {
            queryParameters = queryParameters.set('propertyId', <any>propertyId);
        }

        let headers = this.defaultHeaders;

        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            '*/*'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<Array<ConceptPropertyValue>>('post',`${this.basePath}/concept/class/property/values`,
            {
                body: body,
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
